1. Heap er et dynamisk datasegment som tilbyr lagring utenfor stacken. Generelt kan man plassere vilkårlige variabler på heapen.
2. Når man er ferdig med å bruke data på heapen må man sørge for å få fjernet det slik at minnet blir ledig igjen. Om man ikke frigjør minnet vil man til slutt gå tom for minne, og programmer kan derfor ikke lenger kjøres.
3. En fordel med å plassere et objekt på stabelen er at det automatisk blir slettet etter at prosedyren som ble brukt for å skape det er ferdigkjørt. Om man plasserer objektet på heapen må man gjøre dette manuelt. Dette gir deg mer kontroll, som er en fordel, men kan også føre til at man glemmer å frigjøre minnet i ettertid som vil føre til en minnelekkasje. I java blir objekter plassert på heapen.
4. En minnelekkasje oppstår når man utfører en prosedyre på stacken som lager informasjon på heapen. Etter at prosedyren er fullført fjernes stack framen deres fra stacken. Informasjonen som ligger på heapen kan kun finnes ved hjelp av pekeren i stack framen, som nå ikke lenger finnes. Vi kan derfor aksessere denne informasjonen lenger. En minnelekkasje har oppstått. Java håndterer dette ved bruk av en garbage collector som kontinuerlig sjekker hvor mange steder et objekt på heapen refereres. Dersom denne telleren treffer null(objektet refereres ikke) vil objektet slettes.
5. En peker kan brukes til absolutt alt, mens en referanse kun kan gjelde tre ting. En referanse kan peke til en gyldig adresse(f.eks adressen til en variabel), en ugyldig adresse(f.eks variabel-verdi + 15) og adressen null(peker ikke på noen verdier). Referanse-datatypen brukes for å gjøre peker-variabler sikrere. 
6. Man må være forsiktig med å bruke null-referanser da programmet vil krasje fordi det ikke finner objektet det leter etter.
7. En constructor er en prosedyre som utføres automatisk etter at et objekt har blitt opprettet. En destruktør frigjør minnet objektet har brukt når det slettes fra heapen.
8. En metode må være bundet opp til et objekt mens en prosedyre ikke behøver dette. Metoder har alltid en referanse til sitt eget objekt, kalt 'this'.